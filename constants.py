grammers = {
    'Start': ['S N M'],
    'S': ['#include S', 'ϵ'],
    'N': ['usingnamespacestd;', 'ϵ'],
    'M': ['int main(){ T V }'],
    'T': ['Id T', 'L T', 'Loop T', 'Input T', 'Output T', 'ϵ'],
    'V': ['return 0 ;', 'ϵ'],
    'Id': ['int L', 'float L'],
    'L': ['identifier Assign Z'],
    'Z': [', identifier Assign Z', ';'],
    'Operation': ['number P', 'identifier P'],
    'P': ['O W P', 'ϵ'],
    'O': ['+', '-', '*'],
    'W': ['number', 'identifier'],
    'Assign': ['= Operation', 'ϵ'],
    'Expression': ['Operation K Operation'],
    'K': ['==', '>=', '<=', '!='],
    'Loop': ['while ( Expression ) { T }'],
    'Input': ['cin >> identifier F ;'],
    'F': ['>> identifier F', 'ϵ'],
    'Output': ['cout << C H ;'],
    'H': ['<< C H', 'ϵ'],
    'C': ['number', 'string', 'identifier'],
}
TOKENS = [
    ('reservedword', r'int|float|void|return|if|while|cin|cout|continue|break|#include|using|iostream|namespace|std|main'),
    ('identifier', r'[a-zA-Z_][a-zA-Z0-9_]*'),
    ('number', r'[0-9]+(\.[0-9]+)?'), 
    ('symbol', r'>=|<=|==|!=|\|\||<<|>>|\+|\-|\*|/|=|;|,|{|}|\(|\)|>|<'),
    ('whitespace', r'\s+'),
    ('string', r'"[^"]*"'),
]